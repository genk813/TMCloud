name: Cleanup and Maintenance

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  cleanup-temp-files:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for old temporary files
      run: |
        # Check if scripts/tmp/ directory exists and contains old files
        if [ -d "scripts/tmp" ]; then
          echo "Checking for files older than 30 days in scripts/tmp/"
          
          # Find files older than 30 days
          OLD_FILES=$(find scripts/tmp -type f -mtime +30 2>/dev/null || true)
          
          if [ -n "$OLD_FILES" ]; then
            echo "Found old temporary files:"
            echo "$OLD_FILES"
            
            # Create an issue for manual cleanup
            echo "Creating GitHub issue for cleanup..."
            echo "OLD_FILES<<EOF" >> $GITHUB_ENV
            echo "$OLD_FILES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "CLEANUP_NEEDED=true" >> $GITHUB_ENV
          else
            echo "No old temporary files found"
            echo "CLEANUP_NEEDED=false" >> $GITHUB_ENV
          fi
        else
          echo "scripts/tmp/ directory does not exist"
          echo "CLEANUP_NEEDED=false" >> $GITHUB_ENV
        fi
    
    - name: Create cleanup issue
      if: env.CLEANUP_NEEDED == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const oldFiles = process.env.OLD_FILES;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Cleanup Required: Old Temporary Files Found',
            body: `
            ## Temporary Files Cleanup Required
            
            The following temporary files are older than 30 days and should be reviewed for cleanup:
            
            \`\`\`
            ${oldFiles}
            \`\`\`
            
            ## Action Required
            
            Please review these files and:
            
            1. **Delete** files that are no longer needed
            2. **Convert** useful scripts to proper utilities in the main codebase
            3. **Document** any files that need to be kept temporarily
            
            ## Cleanup Commands
            
            To clean up these files, run:
            \`\`\`bash
            # Review files first
            ls -la scripts/tmp/
            
            # Remove old files (be careful!)
            find scripts/tmp -type f -mtime +30 -delete
            \`\`\`
            
            This issue was automatically created by the cleanup workflow.
            `,
            labels: ['maintenance', 'cleanup', 'automated']
          });

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit bandit safety
    
    - name: Run security audit
      run: |
        echo "Running pip-audit..."
        pip-audit --format=json --output=audit-report.json || true
        
        echo "Running bandit security scan..."
        bandit -r . -f json -o bandit-report.json || true
        
        echo "Running safety check..."
        pip install -r requirements.txt
        safety check --json --output=safety-report.json || true
    
    - name: Check for security issues
      run: |
        # Check if any security issues were found
        SECURITY_ISSUES=false
        
        if [ -f "audit-report.json" ]; then
          # Check pip-audit results
          VULNS=$(jq '.vulnerabilities | length' audit-report.json 2>/dev/null || echo "0")
          if [ "$VULNS" -gt 0 ]; then
            echo "Found $VULNS vulnerabilities in pip-audit"
            SECURITY_ISSUES=true
          fi
        fi
        
        if [ -f "bandit-report.json" ]; then
          # Check bandit results
          BANDIT_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          if [ "$BANDIT_ISSUES" -gt 0 ]; then
            echo "Found $BANDIT_ISSUES security issues in bandit scan"
            SECURITY_ISSUES=true
          fi
        fi
        
        echo "SECURITY_ISSUES=$SECURITY_ISSUES" >> $GITHUB_ENV
    
    - name: Create security issue
      if: env.SECURITY_ISSUES == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸ”’ Security Audit Alert: Vulnerabilities Found',
            body: `
            ## Security Audit Results
            
            The weekly security audit has found potential security issues that require attention.
            
            ### Reports Generated
            
            - **pip-audit**: Dependency vulnerability scan
            - **bandit**: Python security linter
            - **safety**: Known security vulnerabilities check
            
            ### Action Required
            
            1. Download the security reports from the workflow artifacts
            2. Review each vulnerability carefully
            3. Update dependencies where possible
            4. Apply security patches or mitigations
            5. Consider adding security exceptions for false positives
            
            ### Next Steps
            
            \`\`\`bash
            # Update dependencies
            pip install --upgrade -r requirements.txt
            
            # Re-run security checks
            pip-audit
            bandit -r .
            safety check
            \`\`\`
            
            This issue was automatically created by the security audit workflow.
            `,
            labels: ['security', 'high-priority', 'automated']
          });
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          audit-report.json
          bandit-report.json
          safety-report.json
        retention-days: 30

  database-health-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test database
      run: |
        python scripts/create_test_database.py
    
    - name: Run database health check
      run: |
        python -c "
        import sqlite3
        import os
        
        db_path = 'test_data/test_ci.db'
        
        # Check database file exists and is not empty
        if not os.path.exists(db_path):
            raise Exception('Database file does not exist')
            
        file_size = os.path.getsize(db_path)
        if file_size == 0:
            raise Exception('Database file is empty')
            
        print(f'Database file size: {file_size} bytes')
        
        # Check database connectivity
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Check table existence
        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")
        tables = cursor.fetchall()
        expected_tables = ['jiken_c_t', 'standard_char_t_art', 'goods_class_art', 'right_person_art_t']
        
        table_names = [table[0] for table in tables]
        for expected_table in expected_tables:
            if expected_table not in table_names:
                raise Exception(f'Required table {expected_table} not found')
        
        print(f'Found tables: {table_names}')
        
        # Check data integrity
        cursor.execute('SELECT COUNT(*) FROM jiken_c_t')
        count = cursor.fetchone()[0]
        if count == 0:
            raise Exception('No data found in jiken_c_t table')
            
        print(f'Database contains {count} trademark records')
        
        conn.close()
        print('âœ“ Database health check passed')
        "
    
    - name: Test search functionality
      run: |
        python -c "
        import sqlite3
        
        db_path = 'test_data/test_ci.db'
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Test basic search
        cursor.execute('SELECT * FROM jiken_c_t WHERE app_name LIKE ?', ('%ã‚½ãƒ‹ãƒ¼%',))
        results = cursor.fetchall()
        
        if len(results) == 0:
            raise Exception('Search functionality test failed')
            
        print(f'Search test passed: found {len(results)} results')
        
        conn.close()
        "