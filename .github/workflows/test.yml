name: TMCloud Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# ────────────────────────── Unit & Integration ──────────────────────────
jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      # コード取得
      - uses: actions/checkout@v4

      # Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # pip キャッシュ
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # 依存パッケージ
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-timeout
          pip install ruff black isort

      # テスト用データ確認
      - name: Verify test data exists
        run: |
          ls -la test_data/
          [ -f test_data/test_output.db ] || (echo "test_output.db missing" && exit 1)

      # ▶ Unit tests（tests/ が無ければスキップ）
      - name: Run unit tests
        if: ${{ hashFiles('tests/**') != '' }}
        run: |
          export TMCLOUD_DB_PATH="test_data/test_output.db"
          pytest tests/ -v --cov=. --cov-report=xml --timeout=30

      # ▶ 検索機能テスト（tests/ 無しでも実行）
      - name: Run search functionality tests
        run: |
          export TMCLOUD_DB_PATH="test_data/test_output.db"
          python comprehensive_search_test.py --ci-mode

      # ▶ コードフォーマットチェック
      - name: Check code quality
        run: |
          ruff check .
          black  --check --line-length 120 .
          isort  --check-only .

      # ▶ カバレッジを Codecov へ
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      # ▶ 軽量ベンチ
      - name: Performance benchmark
        run: |
          export TMCLOUD_DB_PATH="test_data/test_output.db"
          python performance_benchmark.py --quick-mode
          if grep -q "SLOW QUERY" benchmark_results.txt; then
            echo "::warning::Performance regression detected"; fi

# ───────────────────────────── Security ─────────────────────────────
  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit safety

      # pip-audit は失敗してもワークフローは落とさない
      - name: pip-audit
        continue-on-error: true
        run: pip-audit -f json -o audit-report.json

      # Safety の新コマンド scan を使用。失敗コードを無視
      - name: safety scan
        id: safety
        continue-on-error: true
        run: |
          safety scan --output json --file safety-report.json
          VCOUNT=$(jq '.|length' safety-report.json)
          echo "VCOUNT=$VCOUNT" >> $GITHUB_ENV

      # 脆弱性があったら警告を出すだけ（ジョブ成功扱い）
      - name: Emit warning if vulnerabilities
        if: env.VCOUNT != '0'
        run: echo "::warning::Safety reported ${{ env.VCOUNT }} vulnerabilities"

      # レポートをアーティファクトへ
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-report.json
            safety-report.json
          retention-days: 30
